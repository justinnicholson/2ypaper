if(prod(as.vector(sordered[,8]) == as.vector(bordered[,8])) == 1){
cat("Column",i, "matches", '\n')
}else{
cat("Column does not match. Location saved")
}
if(prod(as.vector(sordered[,30]) == as.vector(bordered[,30])) == 1){
cat("Column",i, "matches", '\n')
}else{
cat("Column does not match. Location saved")
}
sorderedmod = sordered
sorderedmod = sorderedmod[which(is.na(sorderedmod[,30])), 30] == c("NA")
borderedmod = bordered
borderedmod = borderedmod[which(is.na(borderedmod[,30])), 30] == c("NA")
if(prod(as.vector(sordered[,30]) == as.vector(bordered[,30])) == 1){
cat("Column",i, "matches", '\n')
}else{
cat("Column does not match. Location saved")
}
if(prod(toString(sordered[,30]) == toString(bordered[,30])) == 1){
cat("Column",i, "matches", '\n')
}else{
cat("Column does not match. Location saved")
}
if(prod(sordered[,30] == bordered[,30]) == 1){
cat("Column",i, "matches", '\n')
}else{
cat("Column does not match. Location saved")
}
if(prod(toString(sordered[,30]) == toString(bordered[,30])) == 1){
cat("Column",i, "matches", '\n')
}else{
cat("Column does not match. Location saved")
}
for (i in 1:nrow(colinter)){
oldloc = match(colinter[i], colnames(backup.subset))
newloc = match(colinter[i], colnames(suspect.subset))
if (any(is.na(sordered)) == F & any(is.na(bordered)) == F){
if(prod(as.vector(sordered[,newloc]) == as.vector(bordered[,oldloc])) == 1){
cat("Column",i, "matches", '\n')
} else{
cat("Column",colnames(colinter[i]), "does not match. Location saved")
inconsistent = append(inconsistent, colinter[i])
}
}else{
sorderedmod = sordered
sorderedmod = sorderedmod[which(is.na(sorderedmod[,newloc])), newloc] == c("NA")
borderedmod = bordered
borderedmod = borderedmod[which(is.na(borderedmod[,oldloc])), oldloc] == c("NA")
if(prod(toString(sordered[,30]) == toString(bordered[,30])) == 1){
cat("Column",i, "matches", '\n')
}else{
cat("Column does not match. Location saved")
inconsistent = append(inconsistent, colinter[i])
}
}
}
inconsistent
setdiff(sorderedmod$INV_CTY_NAME, borderedmod$INV_CTY_NAME)
setdiff(sorderedmod$INV_CTY_NAME, borderedmod$INV_CTY_NAME)
setdiff(sorderedmod$INV_CTY_NAME, borderedmod$INV_CTY_NAME)
ls(sorderedmod)
setdiff(toString(sordered), toString(bordered))
setdiff(toString(sordered[30]), toString(bordered)[30])
bordered[30]
bordered[8]
setdiff(toString(sordered[8]), toString(bordered)[8])
setdiff(toString(sordered[,8]), toString(bordered)[,8])
setdiff(toString(sordered[,8]), toString(bordered[,8])
)
sordered[,8]) == toString(bordered[,8]
sordered[,8]) == bordered[,8]
sordered[,8] == bordered[,8]
which(is.false(sordered[,8] == bordered[,8])
)
is.true
is.false
which(sordered[,8] == bordered[,8] == F)
which(sordered[,8] == bordered[,8]) == F)
which(sordered[,8] == bordered[,8] == F)
which(sordered[,8] == bordered[,8])
which(sordered[,8] != bordered[,8])
inconsistent = NULL
for (i in 1:nrow(colinter)){
oldloc = match(colinter[i], colnames(backup.subset))
newloc = match(colinter[i], colnames(suspect.subset))
if (any(is.na(sordered)) == F & any(is.na(bordered)) == F){
if(prod(as.vector(sordered[,newloc]) == as.vector(bordered[,oldloc])) == 1){
cat("Column",i, "matches", '\n')
} else{
cat("Column",colnames(colinter[i]), "does not match. Location saved")
inconsistent = append(inconsistent, colinter[i])
}
}else{
sorderedmod = sordered
sorderedmod = sorderedmod[which(is.na(sorderedmod[,newloc])), newloc] == c("NA")
borderedmod = bordered
borderedmod = borderedmod[which(is.na(borderedmod[,oldloc])), oldloc] == c("NA")
if(prod(toString(sordered[,newloc]) == toString(bordered[,oldloc])) == 1){
cat("Column",i, "matches", '\n')
}else{
cat("Column",i, "does not match. Location saved")
inconsistent = append(inconsistent, c(colinter[i]), i)
}
}
}
inconsistent
?append
inconsistent = NULL
#DATA CONSISTENCY
#change hard coded 'colinter' to dynamically changing variable. Also check colinter call
sordered = suspect.subset[order(suspect.subset$CASE_ID), ]
bordered = backup.subset[order(backup.subset$CASE_ID), ]
for (i in 1:nrow(colinter)){
oldloc = match(colinter[i], colnames(backup.subset))
newloc = match(colinter[i], colnames(suspect.subset))
if (any(is.na(sordered)) == F & any(is.na(bordered)) == F){
if(prod(as.vector(sordered[,newloc]) == as.vector(bordered[,oldloc])) == 1){
cat("Column",i, "matches", '\n')
} else{
cat("Column",colnames(colinter[i]), "does not match. Location saved")
inconsistent = append(inconsistent, colinter[i])
}
}else{
sorderedmod = sordered
sorderedmod = sorderedmod[which(is.na(sorderedmod[,newloc])), newloc] == c("NA")
borderedmod = bordered
borderedmod = borderedmod[which(is.na(borderedmod[,oldloc])), oldloc] == c("NA")
if(prod(toString(sordered[,newloc]) == toString(bordered[,oldloc])) == 1){
cat("Column",i, "matches", '\n')
}else{
cat("Column",i, "does not match. Location saved")
inconsistent = cbind(inconsistent, c(colinter[i]), i)
}
}
}
inconsistent
ls(inconsistent)
colnames(inconsistent)
inconsistent[,3]
inconsistent[,2]
inconsistent[1,2]
inconsistent[2,2]
cat(inconsistent[1,2])
show = which(sordered[,inconsistent[,2]] != bordered[,2])
nrow(inconsistent
)
inconsistent[1]
inconsistent[2]
dim(inconsistent)
inconsistent[1,2]
inconsistent = NULL
for (i in 1:nrow(colinter)){
oldloc = match(colinter[i], colnames(backup.subset))
newloc = match(colinter[i], colnames(suspect.subset))
if (any(is.na(sordered)) == F & any(is.na(bordered)) == F){
if(prod(as.vector(sordered[,newloc]) == as.vector(bordered[,oldloc])) == 1){
cat("Column",i, "matches", '\n')
} else{
cat("Column",colnames(colinter[i]), "does not match. Location saved")
inconsistent = append(inconsistent, colinter[i])
}
}else{
sorderedmod = sordered
sorderedmod = sorderedmod[which(is.na(sorderedmod[,newloc])), newloc] == c("NA")
borderedmod = bordered
borderedmod = borderedmod[which(is.na(borderedmod[,oldloc])), oldloc] == c("NA")
if(prod(toString(sordered[,newloc]) == toString(bordered[,oldloc])) == 1){
cat("Column",i, "matches", '\n')
}else{
cat("Column",i, "does not match. Location saved")
inconsistent = cbind(inconsistent, c(colinter[i]),newloc, oldloc, i)
}
}
}
inconsistent
for(j in 1:nrow(inconsistent)){
show = which(sordered[,inconsistent[2,j]] != bordered[,inconsistent[3,j]])
#cat()
}
inconsistent[2,1]
#SHOW INCONSISTENCIES
for(j in 1:nrow(inconsistent)){
show = which(sordered[,inconsistent[j,2]] != bordered[,inconsistent[j,3]])
#cat()
}
hich(sordered[,inconsistent[1,2]]
)
which(sordered[,inconsistent[1,2]]
)
which(sordered[,inconsistent[1,2]]!= bordered[,inconsistent[j,3]])
inconsistent[1,2]
which(sordered[,8]!= bordered[,inconsistent[j,3]])
which(sordered[,8]!= bordered[,8])
paste(inconsistent[1,2])
as.integer(inconsistent[1,2])
#SHOW INCONSISTENCIES
for(j in 1:nrow(inconsistent)){
show = which(sordered[,as.integer(inconsistent[j,2])] != bordered[,inconsistent[j,3]])
#cat()
}
#SHOW INCONSISTENCIES
for(j in 1:nrow(inconsistent)){
show = which(sordered[,as.integer(inconsistent[j,2])] != bordered[,as.integer(inconsistent[j,3])])
#cat()
}
show
cat(sordered[show], "v.s.", bordered[show])
show
cat(sordered[show,as.integer(inconsistent[j,2])], "v.s.", bordered[show,as.integer(inconsistent[j,3])])
sordered[show,as.integer(inconsistent[j,2])]
toString(sordered[show,as.integer(inconsistent[j,2])])
cat(toString(sordered[show,as.integer(inconsistent[j,2])]), "v.s.", toString(bordered[show,as.integer(inconsistent[j,3])]))
#SHOW INCONSISTENCIES
for(j in 1:nrow(inconsistent)){
show = which(sordered[,as.integer(inconsistent[j,2])] != bordered[,as.integer(inconsistent[j,3])])
cat(toString(sordered[show,as.integer(inconsistent[j,2])]), "v.s.", toString(bordered[show,as.integer(inconsistent[j,3])]))
}
inconsistent
#SHOW INCONSISTENCIES
for(j in 1:nrow(inconsistent)){
show = which(sordered[,as.integer(inconsistent[j,2])] != bordered[,as.integer(inconsistent[j,3])])
cat("difference in variable", inconsistent[j,1], toString(sordered[show,as.integer(inconsistent[j,2])]), "v.s.", toString(bordered[show,as.integer(inconsistent[j,3])]))
}
cat("difference in variable",'\n', inconsistent[j,1], toString(sordered[show,as.integer(inconsistent[j,2])]), "v.s.", toString(bordered[show,as.integer(inconsistent[j,3])]))
#SHOW INCONSISTENCIES
for(j in 1:nrow(inconsistent)){
show = which(sordered[,as.integer(inconsistent[j,2])] != bordered[,as.integer(inconsistent[j,3])])
cat("difference in variable",
inconsistent[j,1],
'\n'
toString(sordered[show,as.integer(inconsistent[j,2])]),
"v.s.",
toString(bordered[show,as.integer(inconsistent[j,3])]))
}
for(j in 1:nrow(inconsistent)){
show = which(sordered[,as.integer(inconsistent[j,2])] != bordered[,as.integer(inconsistent[j,3])])
cat("difference in variable",
inconsistent[j,1],
'/n'
toString(sordered[show,as.integer(inconsistent[j,2])]),
"v.s.",
toString(bordered[show,as.integer(inconsistent[j,3])]))
}
#SHOW INCONSISTENCIES
for(j in 1:nrow(inconsistent)){
show = which(sordered[,as.integer(inconsistent[j,2])] != bordered[,as.integer(inconsistent[j,3])])
cat("difference in variable", inconsistent[j,1], '\n';
toString(sordered[show,as.integer(inconsistent[j,2])]),
"v.s.",
toString(bordered[show,as.integer(inconsistent[j,3])]))
}
#SHOW INCONSISTENCIES
for(j in 1:nrow(inconsistent)){
show = which(sordered[,as.integer(inconsistent[j,2])] != bordered[,as.integer(inconsistent[j,3])])
cat("difference in variable", inconsistent[j,1], '\n',
toString(sordered[show,as.integer(inconsistent[j,2])]),
"v.s.",
toString(bordered[show,as.integer(inconsistent[j,3])]))
}
show
show = c(show, "1152")
show
show = as.vector(show)
show
#SHOW INCONSISTENCIES
for(j in 1:nrow(inconsistent)){
show = which(sordered[,as.integer(inconsistent[j,2])] != bordered[,as.integer(inconsistent[j,3])])
cat("difference in variable", inconsistent[j,1], '\n',
toString(sordered[show,as.integer(inconsistent[j,2])]),
"v.s.",
toString(bordered[show,as.integer(inconsistent[j,3])]))
}
show = which(sordered[,as.integer(inconsistent[j,2])] != bordered[,as.integer(inconsistent[j,3])])
show
for(j in 1:nrow(inconsistent)){
show = which(sordered[,as.integer(inconsistent[j,2])] != bordered[,as.integer(inconsistent[j,3])])
for (k in 1:row(show)){
cat("difference in variable", inconsistent[j,1], '\n',
toString(sordered[show[k],as.integer(inconsistent[j,2])]),
"v.s.",
toString(bordered[show[k],as.integer(inconsistent[j,3])]))
}
}
nrow(show)
NROW(show)
show = as.vector(which(sordered[,as.integer(inconsistent[j,2])] != bordered[,as.integer(inconsistent[j,3])]))
nrow(show)
NROW(show)
#SHOW INCONSISTENCIES
for(j in 1:nrow(inconsistent)){
show = as.vector(which(sordered[,as.integer(inconsistent[j,2])] != bordered[,as.integer(inconsistent[j,3])]))
for (k in 1:NROW(show)){
cat("difference in variable", inconsistent[j,1], '\n',
toString(sordered[show[k],as.integer(inconsistent[j,2])]),
"v.s.",
toString(bordered[show[k],as.integer(inconsistent[j,3])]))
}
}
show
show = append(show, 1153)
show
NROW(show)
#SHOW INCONSISTENCIES
for(j in 1:nrow(inconsistent)){
show = as.vector(which(sordered[,as.integer(inconsistent[j,2])] != bordered[,as.integer(inconsistent[j,3])]))
for (k in 1:NROW(show)){
cat("difference in variable", inconsistent[j,1], '\n',
toString(sordered[show[k],as.integer(inconsistent[j,2])]),
"v.s.",
toString(bordered[show[k],as.integer(inconsistent[j,3])]))
}
}
show[1154]
show[2]
show
show[2]
show[,2]
show[2]
show
NROW(show)
show
show = append(show, 100)
show
show[2]
for (k in 1:NROW(show)){
cat("difference in variable", inconsistent[j,1], '\n',
toString(sordered[show[k],as.integer(inconsistent[j,2])]),
"v.s.",
toString(bordered[show[k],as.integer(inconsistent[j,3])]))
}
for (k in 1:NROW(show)){
cat("difference in variable", inconsistent[j,1], '\n',
toString(sordered[show[k],as.integer(inconsistent[j,2])]),
"v.s.",
toString(bordered[show[k],as.integer(inconsistent[j,3])]), '\n')
}
show
for (k in 1:NROW(show)){
cat("difference in variable", inconsistent[j,1], '\n',
toString(sordered[show[k],as.integer(inconsistent[j,2])]),
"v.s.",
toString(bordered[show[k],as.integer(inconsistent[j,3])]), "row", show[k] , '\n')
}
for (k in 1:NROW(show)){
cat("row", show[k] ,'\n', "difference in variable", inconsistent[j,1], '\n',
toString(sordered[show[k],as.integer(inconsistent[j,2])]),
"v.s.",
toString(bordered[show[k],as.integer(inconsistent[j,3])]), '\n')
}
for (k in 1:NROW(show)){
cat("row", show[k] ,'\n', "difference in variable", inconsistent[j,1], '\n',
toString(sordered[show[k],as.integer(inconsistent[j,2])]),
"v.s.",
toString(bordered[show[k],as.integer(inconsistent[j,3])]), '\n \n')
}
#SHOW INCONSISTENCIES
for(j in 1:nrow(inconsistent)){
show = as.vector(which(sordered[,as.integer(inconsistent[j,2])] != bordered[,as.integer(inconsistent[j,3])]))
for (k in 1:NROW(show)){
cat("row", show[k] ,'\n', "difference in variable", inconsistent[j,1], '\n',
toString(sordered[show[k],as.integer(inconsistent[j,2])]),
"v.s.",
toString(bordered[show[k],as.integer(inconsistent[j,3])]), '\n \n')
}
}
#ROW CONSISTENCY
#Check for observation consistency between sets based on user set unique key.
#Right now this is limited to one variable.
obsdel = setdiff(as.vector(backup.frame$CASE_ID), as.vector(suspect.frame$CASE_ID))
obsadd = setdiff(as.vector(suspect.frame$CASE_ID), as.vector(backup.frame$CASE_ID))
if (length(obsdel) > 0){
cat("These observations have been dropped in new data:", obsdel, sep = '\n')
}else if(length(obsadd) > 0){
cat("These observations have been added in new data:", obsadd, sep = '\n')
}else {cat("Observations match")
}
#code for proper subsetting should go here
#change hardcoded backup / suspect to whichever is longer dynamically.
rowinter = intersect(as.vector(suspect.frame$CASE_ID), as.vector(backup.frame$CASE_ID))
#Row subset
backup.subset = backup.frame[backup.frame$CASE_ID %in% inter,]
#COLUMN CONSISTENCY
coldel = setdiff(as.vector(colnames(backup.frame)), as.vector(colnames(suspect.frame)))
coladd = setdiff(as.vector(colnames(suspect.frame)), as.vector(colnames(backup.frame)))
colinter =as.matrix(intersect(as.vector(colnames(suspect.frame)), as.vector(colnames(backup.frame))))
if (length(coldel) > 0){
cat("These variables have been dropped or changed in new data:", coldel, sep = '\n')
}else if(length(coladd) > 0){
cat("These variables have been added or changed in new data:", coladd, sep = '\n')
}else {cat("variable names match")
}
#Column subset
suspect.subset = suspect.frame[,colnames(suspect.frame) %in% colinter]
backup.subset = backup.subset[,colnames(backup.subset) %in% colinter]
#DATA CONSISTENCY
#change hard coded 'colinter' to dynamically changing variable. Also check colinter call
sordered = suspect.subset[order(suspect.subset$CASE_ID), ]
bordered = backup.subset[order(backup.subset$CASE_ID), ]
for (i in 1:nrow(colinter)){
oldloc = match(colinter[i], colnames(backup.subset))
newloc = match(colinter[i], colnames(suspect.subset))
if (any(is.na(sordered)) == F & any(is.na(bordered)) == F){
if(prod(as.vector(sordered[,newloc]) == as.vector(bordered[,oldloc])) == 1){
cat("Column",i, "matches", '\n')
} else{
cat("Column",colnames(colinter[i]), "does not match. Location saved")
inconsistent = append(inconsistent, colinter[i])
}
}else{
sorderedmod = sordered
sorderedmod = sorderedmod[which(is.na(sorderedmod[,newloc])), newloc] == c("NA")
borderedmod = bordered
borderedmod = borderedmod[which(is.na(borderedmod[,oldloc])), oldloc] == c("NA")
if(prod(toString(sordered[,newloc]) == toString(bordered[,oldloc])) == 1){
cat("Column",i, "matches", '\n')
}else{
cat("Column",i, "does not match. Location saved")
inconsistent = cbind(inconsistent, c(colinter[i]),newloc, oldloc, i)
}
}
}
#SHOW INCONSISTENCIES
for(j in 1:nrow(inconsistent)){
show = as.vector(which(sordered[,as.integer(inconsistent[j,2])] != bordered[,as.integer(inconsistent[j,3])]))
for (k in 1:NROW(show)){
cat("row", show[k] ,'\n', "difference in variable", inconsistent[j,1], '\n',
toString(sordered[show[k],as.integer(inconsistent[j,2])]),
"v.s.",
toString(bordered[show[k],as.integer(inconsistent[j,3])]), '\n \n')
}
}
#ROW CONSISTENCY
#Check for observation consistency between sets based on user set unique key.
#Right now this is limited to one variable.
obsdel = setdiff(as.vector(backup.frame$CASE_ID), as.vector(suspect.frame$CASE_ID))
obsadd = setdiff(as.vector(suspect.frame$CASE_ID), as.vector(backup.frame$CASE_ID))
if (length(obsdel) > 0){
cat("These observations have been dropped in new data:", obsdel, sep = '\n')
}else if(length(obsadd) > 0){
cat("These observations have been added in new data:", obsadd, sep = '\n')
}else {cat("Observations match")
}
#code for proper subsetting should go here
#change hardcoded backup / suspect to whichever is longer dynamically.
rowinter = intersect(as.vector(suspect.frame$CASE_ID), as.vector(backup.frame$CASE_ID))
#Row subset
backup.subset = backup.frame[backup.frame$CASE_ID %in% inter,]
#COLUMN CONSISTENCY
coldel = setdiff(as.vector(colnames(backup.frame)), as.vector(colnames(suspect.frame)))
coladd = setdiff(as.vector(colnames(suspect.frame)), as.vector(colnames(backup.frame)))
colinter =as.matrix(intersect(as.vector(colnames(suspect.frame)), as.vector(colnames(backup.frame))))
if (length(coldel) > 0){
cat("These variables have been dropped or changed in new data:", coldel, sep = '\n')
}else if(length(coladd) > 0){
cat("These variables have been added or changed in new data:", coladd, sep = '\n')
}else {cat("variable names match")
}
#Column subset
suspect.subset = suspect.frame[,colnames(suspect.frame) %in% colinter]
backup.subset = backup.subset[,colnames(backup.subset) %in% colinter]
#DATA CONSISTENCY
#change hard coded 'colinter' to dynamically changing variable. Also check colinter call
sordered = suspect.subset[order(suspect.subset$CASE_ID), ]
bordered = backup.subset[order(backup.subset$CASE_ID), ]
for (i in 1:nrow(colinter)){
oldloc = match(colinter[i], colnames(backup.subset))
newloc = match(colinter[i], colnames(suspect.subset))
if (any(is.na(sordered)) == F & any(is.na(bordered)) == F){
if(prod(as.vector(sordered[,newloc]) == as.vector(bordered[,oldloc])) == 1){
cat("Column",i, "matches", '\n')
} else{
cat("Column",colnames(colinter[i]), "does not match. Location saved")
inconsistent = append(inconsistent, colinter[i])
}
}else{
sorderedmod = sordered
sorderedmod = sorderedmod[which(is.na(sorderedmod[,newloc])), newloc] == c("NA")
borderedmod = bordered
borderedmod = borderedmod[which(is.na(borderedmod[,oldloc])), oldloc] == c("NA")
if(prod(toString(sordered[,newloc]) == toString(bordered[,oldloc])) == 1){
cat("Column",i, "matches", '\n')
}else{
cat("Column",i, "does not match. Location saved", '\n')
inconsistent = cbind(inconsistent, c(colinter[i]),newloc, oldloc, i)
}
}
}
#SHOW INCONSISTENCIES
for(j in 1:nrow(inconsistent)){
show = as.vector(which(sordered[,as.integer(inconsistent[j,2])] != bordered[,as.integer(inconsistent[j,3])]))
for (k in 1:NROW(show)){
cat("row", show[k] ,'\n', "difference in variable", inconsistent[j,1], '\n',
toString(sordered[show[k],as.integer(inconsistent[j,2])]),
"v.s.",
toString(bordered[show[k],as.integer(inconsistent[j,3])]), '\n \n')
}
}
rm(lordered)
rm(obsdel, obsadd, coldel, coladd, colinter, backup.subset, data,subset)
rm(data.subset)
rm(suspect.subset)
rm(suspect.frame, backup.frame)
rm(bordermod)
rm(bordermod)
rm(borderedmod)
rm(i)
rm(k)
rm(inter, newloc, oldloc)
rm(sorderedmod)
rm(show)
rm(bordered)
