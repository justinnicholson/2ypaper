U11a = 0.40
#get parameters
lambda_1 = lambda_2 = s_lambda
Q1b = exp(lambda_2 * U21b) / (exp(lambda_2 * U21b) + exp(lambda_2 * U20b))
U10b = Q1b * 0.80 + (1-Q1b) * 6.40
P1b = exp(lambda_1 * U11b) / (exp(lambda_1 * U11b) + exp(lambda_1 * U10b))
U20a = P1b * 0.4 + (1-P1b) * (Q1b * 3.20 + (1-Q1b * 1.60))
Q1a = exp(lambda_2 * U21a) / (exp(lambda_2 * U21a) + exp(lambda_2 * U20a))
U10a = Q1a * 0.20 + (1-Q1a) * (P1b * 1.60 + (1-P1b) * (Q1b*0.80 + (1-Q1b) * 6.40))
P1a = exp(lambda_1 * U11a) / (exp(lambda_1 * U11a) + exp(lambda_1 * U10a))
probs = cbind(P1a,
(1-P1a) * (Q1a),
(1-P1a) * (1-Q1a) * (P1b),
(1-P1a) * (1-Q1a) * (1-P1b) * (Q1b),
(1-P1a) * (1-Q1a) * (1-P1b) *(1-Q1b))
result = cbind(lambda_1, lambda_2, probs)
#Data reshaping for low-lambda
result = as.data.frame(result)
names(result) = c("lambda_1", "lambda_2", "1 takes at a", "2 takes at b", "1 takes at b", "2takes at b", "2 passes")
result_melted = melt(result , c("lambda_1", "lambda_2"))
names(result_melted) = c("lambda_1", "lambda_2", "outcome", "probability")
#create the plots:
ggplot(result_melted) +
geom_line(aes(x = lambda_1, y = probability, linetype = outcome, color = outcome))
ggplot(highlambda_melted) +
geom_line(aes(x = lambda_1, y = probability, linetype = outcome, color = outcome))
result_melted
result
ggplot(result_melted) +
geom_line(aes(x = lambda_1, y = outcome, linetype = probability, color = probability))
geom_line(aes(x = lambda_1, y = outcome, linetype = outcome, color = outcome))
result_melted
result
geom_line(aes(x = lambda_1, y = 1 takes at a, linetype = outcome, color = outcome))
names(result) = c("lambda_1", "lambda_2", "1_a", "2_b", "1c", "2c", "2_p")
ggplot(result) +
geom_line(aes(x = lambda_1, y = 1_a, l))
ggplot(result) +
geom_line(aes(x = lambda_1, y = 1_a))
geom_line(aes(x = lambda_1, y = "1_a"))
result_melted
result
names(result)
ggplot(result_melted) +
geom_line(aes(x = lambda_1, y = probability/apply(probability,2,sum), linetype = outcome, color = outcome))
ggplot(result_melted) +
geom_line(aes(x = lambda_1, y = probability/apply(result_melted[,2],2,sum), linetype = outcome, color = outcome))
ggplot(result_melted) +
geom_line(aes(x = lambda_1, y = probability, linetype = outcome, color = outcome))
ggplot(result_melted) +
geom_line(aes(x = lambda_1, y = probability, linetype = outcome, color = outcome))+
stat_summary(fun.y="sum", geom="point")
ggplot(result_melted) +
geom_line(aes(x = lambda_1, y = probability, linetype = outcome, color = outcome)+
stat_summary(fun.y="sum", geom="point"))
ggplot(result_melted) +
geom_line(aes(x = lambda_1, y = probability, linetype = outcome, color = outcome) +
stat_summary(fun.y="sum", geom="point"))
ggplot(result_melted x = lambda_1, y = probability) +
geom_line(aes(x = lambda_1, y = probability, linetype = outcome, color = outcome)
ggplot(result_melted, x = lambda_1, y = probability) +
geom_line(aes(x = lambda_1, y = probability, linetype = outcome, color = outcome)
ggplot(result_melted, x = lambda_1, y = probability) +
geom_line()
ggplot(result_melted) +
geom_line(aes(x = lambda_1, y = probability, linetype = outcome, color = outcome))
plot(lambda_1, probs[,1], type = "1", lty = "1", xlab = "lambda", ylab = "Probability", ylim = c(-0.01,1))
plot(lambda_1, probs[,1], type = 1, lty = "1", xlab = "lambda", ylab = "Probability", ylim = c(-0.01,1))
lines(lambda_1, probs[,2], lty = 2)
lines(lambda_1, probs[,3], lty = 3)
lines(lambda_1, probs[,4], lty = 4)
plot(lambda_1, probs[,1], type = "1", lty = "1", xlab = "lambda", ylab = "Probability", ylim = c(-0.01,1))
lines(lambda_1, probs[,2], lty = 2)
lines(lambda_1, probs[,3], lty = 3)
lines(lambda_1, probs[,4], lty = 4)
plot(lambda_1, probs[,1], type = "1", lty = 1, xlab = "lambda", ylab = "Probability", ylim = c(-0.01,1))
lines(lambda_1, probs[,2], lty = 2)
lines(lambda_1, probs[,3], lty = 3)
lines(lambda_1, probs[,4], lty = 4)
plot(lambda_1, probs[,1], type = 1, lty = 1, xlab = "lambda", ylab = "Probability", ylim = c(-0.01,1))
lines(lambda_1, probs[,2], lty = 2)
lines(lambda_1, probs[,3], lty = 3)
lines(lambda_1, probs[,4], lty = 4)
#stuff
plot(lambda_1, Q1b, type = 1, lty = 1, xlab = "lambda", ylab = "Probability", ylim = c(-0.01,1))
lines(lambda_1, P1b, lty = 2)
lines(lambda_1, Q1a, lty = 3)
lines(lambda_1, P1a, lty = 4)
plot(lambda_1, Q1b, type = "l", lty = 1, xlab = "lambda", ylab = "Probability", ylim = c(-0.01,1))
lines(lambda_1, P1b, lty = 2)
lines(lambda_1, Q1a, lty = 3)
lines(lambda_1, P1a, lty = 4)
legend(15, 0.55, lty = c(1,2,3, 4), cex = 0.8, legend = c("round1","round2", "round 3", "round 4"))
ggplot(result_melted) +
geom_line(aes(x = lambda_1, y = probability, linetype = outcome, color = outcome))
ggsave("outcomes.pdf")
pdf("actions.pdf")
plot(lambda_1, Q1b, type = "l", lty = 1, xlab = "lambda", ylab = "Probability", ylim = c(-0.01,1))
lines(lambda_1, P1b, lty = 2)
lines(lambda_1, Q1a, lty = 3)
lines(lambda_1, P1a, lty = 4)
legend(15, 0.55, lty = c(1,2,3, 4), cex = 0.8, legend = c("round1","round2", "round 3", "round 4"))
dev.off()
source(maxlik_to_latex.R)
source("maxlik_to_latex.R")
class_centi = maxLik(LQRE_centipede,
X1 = X1_class,
X2 = X2_class,
start = stval,
method = "BHHH",
Y = t(Y_class))
summary(class_centi)
names(class_centi)
names(class_centi$estimate)
names(class_centi$estimate) = "const"
class_centi$estimate
class_centi$estimate = exp(class_centi$estimate)
class_centi$estimate
class_centi = maxLik(LQRE_centipede,
X1 = X1_class,
X2 = X2_class,
start = stval,
method = "BFGS",
Y = t(Y_class))
summary(class_centi)
class_centi = maxLik(LQRE_centipede,
X1 = X1_class,
X2 = X2_class,
start = stval,
method = "BHHH",
Y = t(Y_class))
summary(class_centi)
class_centi$estimate = exp(class_centi$estimate)
names(class_centi$estimate) = "const"
################################################################################
## Author:      Justin Nicholson
## Class:       PSC 505
## Assignment:  Problem Set 7
##
## Description:
## Analysis of Centipede Game
##
################################################################################
################################################################################
#Housekeeping!!
################################################################################
#Load required libraries - this list just keeps growing
library(epicalc)
library(foreign)
library(maxLik)
library(foreign)
library(ggplot2)
library(MASS)
library(mlogit)
source("maxlik_to_latex.R")
#Cleanup
rm(list=ls())                           #remove all variables
detachAllData()                         #detach all previous data - requires epicalc library
setwd("~/Desktop/Academic/505/H_07")    #set working directory
#load and attach data
load("centipede_201310.Rdata")         #load dataset
data = centipede                       #attach dataset
attach(centipede)
#Centipede LQRE model
################################################################################
################################################################################
#notes:
#We will use standard backward induction and an 'agent error' interpretation of the LQRE model for
#this section. We will denote probabilities for player 1 with p, and player 2 with q. Expected utilities
#
# let Pkj denote the probability that player 1 makes move k at information set j.
#     Qkj denote the probability that player 2 makes move k at information set j.
#with k in {0,1} (0 for pass, 1 for take) and j in {a, b}
# ex. for concreteness P_0a denotes the probability that player 1 passes at information set a.
#Define utilities:
# Uikj = utility of player i for action k at information set j.
#i.e. U21b - utility of player 2 for taking at 2's information set b.
################################################################################
################################################################################
################################################################################
#Question 1
################################################################################
################################################################################
#Question 2
################################################################################
LQRE_centipede = function(beta,
X1,
X2,
Y = c(0,0,0,0,0)){
#Create lambda's for both players
lambda_1 = exp(X1 %*% beta)
lambda_2 = exp(X2 %*% beta)
#Derive exoected utilites and then calculate LQRE probabilities, starting at the bottom of the tree.
U20b = 1.60
U21b = 3.20
U11b = 1.60
U21a = 0.80
U11a = 0.40
#calculations - clean up!!!!
Q1b = exp(lambda_2 * U21b) / (exp(lambda_2 * U21b) + exp(lambda_2 * U20b))
U10b = Q1b * 0.80 + (1-Q1b) * 6.40
P1b = exp(lambda_1 * U11b) / (exp(lambda_1 * U11b) + exp(lambda_1 * U10b))
U20a = P1b * 0.4 + (1-P1b) * (Q1b * 3.20 + (1-Q1b * 1.60))
Q1a = exp(lambda_2 * U21a) / (exp(lambda_2 * U21a) + exp(lambda_2 * U20a))
U10a = Q1a * 0.20 + (1-Q1a) * (P1b * 1.60 + (1-P1b) * (Q1b*0.80 + (1-Q1b) * 6.40))
P1a = exp(lambda_1 * U11a) / (exp(lambda_1 * U11a) + exp(lambda_1 * U10a))
#probabilities
probs = cbind(P1a,
(1-P1a) * (Q1a),
(1-P1a) * (1-Q1a) * (P1b),
(1-P1a) * (1-Q1a) * (1-P1b) * (Q1b),
(1-P1a) * (1-Q1a) * (1-P1b) *(1-Q1b))
#Log-liklihood function.
ll = log(probs %*% Y)
}
################################################################################
#Plot of Centpede LQRE model
################################################################################
#Define lambdas for this section.
s_lambda = as.matrix((seq(from = 0.00, to = 10, by = 0.01)), nrow = 1)
b_lambda = as.matrix((seq(from = 0.00, to = 20, by = 0.01)), nrow = 1)
U20b = 1.60
U21b = 3.20
U11b = 1.60
U21a = 0.80
U11a = 0.40
#get parameters
lambda_1 = lambda_2 = s_lambda
Q1b = exp(lambda_2 * U21b) / (exp(lambda_2 * U21b) + exp(lambda_2 * U20b))
U10b = Q1b * 0.80 + (1-Q1b) * 6.40
P1b = exp(lambda_1 * U11b) / (exp(lambda_1 * U11b) + exp(lambda_1 * U10b))
U20a = P1b * 0.4 + (1-P1b) * (Q1b * 3.20 + (1-Q1b * 1.60))
Q1a = exp(lambda_2 * U21a) / (exp(lambda_2 * U21a) + exp(lambda_2 * U20a))
U10a = Q1a * 0.20 + (1-Q1a) * (P1b * 1.60 + (1-P1b) * (Q1b*0.80 + (1-Q1b) * 6.40))
P1a = exp(lambda_1 * U11a) / (exp(lambda_1 * U11a) + exp(lambda_1 * U10a))
probs = cbind(P1a,
(1-P1a) * (Q1a),
(1-P1a) * (1-Q1a) * (P1b),
(1-P1a) * (1-Q1a) * (1-P1b) * (Q1b),
(1-P1a) * (1-Q1a) * (1-P1b) *(1-Q1b))
result = cbind(lambda_1, lambda_2, probs)
#Data reshaping for low-lambda
result = as.data.frame(result)
names(result) = c("lambda_1", "lambda_2", "1 takes at a", "2 takes at a", "1 takes at b", "2takes at b", "2 passes")
result_melted = melt(result , c("lambda_1", "lambda_2"))
names(result_melted) = c("lambda_1", "lambda_2", "outcome", "probability")
#create the plots:
ggplot(result_melted) +
geom_line(aes(x = lambda_1, y = probability, linetype = outcome, color = outcome))
ggsave("outcomes.pdf")
#Quick cumulative density plot
pdf("actions.pdf")
plot(lambda_1, Q1b, type = "l", lty = 1, xlab = "lambda", ylab = "Probability", ylim = c(-0.01,1))
lines(lambda_1, P1b, lty = 2)
lines(lambda_1, Q1a, lty = 3)
lines(lambda_1, P1a, lty = 4)
legend(15, 0.55, lty = c(1,2,3, 4), cex = 0.8, legend = c("round1","round2", "round 3", "round 4"))
dev.off()
#stuff
################################################################################
#Question 2 - Estimate Lambda from the data
################################################################################
#Create appropriate Y matrix, and fake X1's and X2's
Y = cbind(y1a, y2a, y1b, y2b)
Y_f = as.vector(rep(0,nrow(Y)))
Y = cbind(Y,Y_f)
for (i in 1:nrow(Y)){
if(Y[i,1] == 0 & Y[i,2] == 0 & Y[i,3] == 0 & Y[i,4] == 0){
Y[i,5] = 1
}
else{
Y[i,5] = 0
}
}
X1 = matrix(1,nrow = nrow(centipede), ncol = 1)
X2 = X1
stval = runif(1)*0.1 #Standard start values
Y_class = Y[centipede$cohort==9,]
X1_class = matrix(1,nrow = nrow(Y_class), ncol = 1)
X2_class = X1_class
class_centi = maxLik(LQRE_centipede,
X1 = X1_class,
X2 = X2_class,
start = stval,
method = "BHHH",
Y = t(Y_class))
everyone_centi = maxLik(LQRE_centipede,
X1 = X1,
X2 = X2,
start = stval,
method = "BFGS",
Y = t(Y))
summary(class_centi)
class_centi = maxLik(LQRE_centipede,
X1 = X1_class,
X2 = X2_class,
start = stval,
method = "BFGS",
Y = t(Y_class))
summary(class_centi)
class_centi = maxLik(LQRE_centipede,
X1 = X1_class,
X2 = X2_class,
start = stval,
method = "BHHH",
Y = t(Y_class))
summary(class_centi)
exp(-0.77141)
names(class_centi$estimate) = "const"
class_centi$estimate = exp(class_centi$estimate)
maxLik_to_latex(class_centi)
source("maxlik_to_latex.R")
maxLik_to_latex(class_centi)
summary(everyone_centi)
names(everyone_centi$estimate) = "const"
everyone_centi$estimate = exp(everyone_centi$estimate)
maxLik_to_latex(everyone_centi)
data2=na.omit(centipede)
data2$gender1=as.factor(data2$gender1)
data2$gender2=as.factor(data2$gender2)
#Create separate sets of regressors depending on the gender of players 1 and 2
X1=cbind(1,data2$comm,data2$round,data2$cohort,data2$gender1)
X2=cbind(1,data2$comm,data2$round,data2$cohort,data2$gender2)
everyone_centi_3 = maxLik(LQRE_centipede,
X1 = X1,
X2 = X2,
start = rep(0,5),
method = "BFGS",
Y = t(Y))
everyone_centi_3
summary(everyone_centi_3)
names(everyone_centi_3$estimate) = c("const", "comm", "round", "cohort", "gender")
everyone_centi_3_estimate = exp(everyone_centi_3$estimate)
summary(everyone_centi_3)
maxLik_to_latex(everyone_centi_3)
log(-0.6)
everyone_centi_3$estimate = exp(everyone_centi_3$estimate)
maxLik_to_latex(everyone_centi_3)
everyone_centi_3 = maxLik(LQRE_centipede,
X1 = X1,
X2 = X2,
start = rep(0,5),
method = "BFGS",
Y = t(Y))
summary(everyone_centi_3)
maxLik_to_latex(everyone_centi_3)
everyone_centi_3
start_fit = cbind(1, mean(comm), mean(round), mean(cohort), 0)
end_fit = cbind(1, mean(comm), mean(round), mean(cohort), 0)
dim(start_fit)
start_fit%*%everyone_centi_3$estimate
everyone_centi_3$estimate
start_fit = cbind(1, mean(data2$comm), mean(data2$round), mean(data2$cohort), 0)
end_fit = cbind(1, mean(data2$comm), mean(data2$round), mean(data2$cohort), 1)
start_fit %*% everyone_centi_3$estimate
end_fit %*% everyone_centi_3$estimate
exp(-0.6734633)
exp(-0.6252539)
result_2 = cbind(lambda_1, Q1b, P1b, Q1a, P1a)
names(result2) = c("lambda_1", "Round 1", "Round 2" , "Round 3", "Round 4")
result2_melted = melt(result2 , c("lambda_1"))
names(result2_melted) = c("lambda_1", "outcome", "probability")
result_2 = cbind(lambda_1, Q1b, P1b, Q1a, P1a)
names(result_2) = c("lambda_1", "Round 1", "Round 2" , "Round 3", "Round 4")
result2_melted = melt(result_2 , c("lambda_1"))
names(result2_melted) = c("lambda_1", "outcome", "probability")
result2_melted
ggplot(result2_melted) +
geom_line(aes(x = lambda_1, y = probability, linetype = outcome, color = outcome))
result2_melted
names(result2_melted)
ggplot(result2_melted) +
geom_line(aes(x = lambda_1, y = probability, linetype = outcome, color = outcome))
ggplot(result2_melted) +
geom_line(aes(x = lambda_1, y = outcome, linetype = probability, color = probability))
result_2 = cbind(lambda_1, Q1b, P1b, Q1a, P1a)
result_2 = as.data.frame(result_2)
names(result_2) = c("lambda_1", "Round 1", "Round 2" , "Round 3", "Round 4")
result2_melted = melt(result_2 , c("lambda_1"))
names(result2_melted) = c("lambda_1", "outcome", "probability"
)
result2_melted = melt(result_2 , c("lambda_1"))
names(result2_melted) = c("lambda_1", "outcome", "probability")
ggplot(result2_melted) +
geom_line(aes(x = lambda_1, y = probability, linetype = probability, color = probability))
ggsave("actions2.pdf")
everyone_centi_3$estimate
ggplot(result2_melted) +
geom_line(aes(x = lambda_1, y = probability, linetype = outcome, color = outcome))
ggsave("actions2.pdf")
result_2 = cbind(lambda_1, Q1b, P1b, Q1a, P1a, (1-P1a-Q1a-P1b-Q1b))
result_2 = as.data.frame(result_2)
names(result_2) = c("lambda_1", "Player 2 in Round 4", "Player 1 in Round 3" , "Player 2 in Round 2", "Player 1 in Round 1")
result2_melted = melt(result_2 , c("lambda_1"))
names(result2_melted) = c("lambda_1", "outcome", "probability")
ggplot(result2_melted) +
geom_line(aes(x = lambda_1, y = probability, linetype = outcome, color = outcome))
ggsave("actions3.pdf")
result_2 = cbind(lambda_1, Q1b, P1b, Q1a, P1a, (1-P1a-Q1a-P1b-Q1b))
result_2 = as.data.frame(result_2)
result_2
names(result_2) = c("lambda_1", "Player 2 in Round 4", "Player 1 in Round 3" , "Player 2 in Round 2", "Player 1 in Round 1")
result2_melted = melt(result_2 , c("lambda_1"))
result_2
names(result_2)
result_2 = cbind(lambda_1, Q1b, P1b, Q1a, P1a)
result_2 = as.data.frame(result_2)
names(result_2) = c("lambda_1", "Player 2 in Round 4", "Player 1 in Round 3" , "Player 2 in Round 2", "Player 1 in Round 1")
result2_melted = melt(result_2 , c("lambda_1"))
names(result2_melted) = c("lambda_1", "outcome", "probability")
ggplot(result2_melted) +
geom_line(aes(x = lambda_1, y = probability, linetype = outcome, color = outcome))
ggsave("actions3.pdf")
ggplot(result2_melted) +
geom_line(aes(x = lambda_1, y = probability, linetype = outcome, color = outcome)) +
ggtitle("Probability of Choosing Take")
ggsave("actions3.pdf")
ggplot(result_melted) +
geom_line(aes(x = lambda_1, y = probability, linetype = outcome, color = outcome))
+ggtitle("Equilibrium Outcome Probabilities")
ggsave("outcomes.pdf")
ggplot(result_melted) +
geom_line(aes(x = lambda_1, y = probability, linetype = outcome, color = outcome)) +
ggtitle("Equilibrium Outcome Probabilities")
ggsave("outcomes.pdf")
#Libraries
library(foreign)
library(countrycode)
library(epicalc)
#Cleanup and preliminaries
detachAllData()                                #detach all previous data - requires epicalc library
setwd("/Users/justinnicholson/documents/academic/projects/2ypaper/data/images")    #set working directory
load("adjudication.rda")
load("adjudicationbackup.rda")
source("consistency.R")
list.files()
setwd("/Users/justinnicholson/documents/academic/projects/2ypaper/data/scripts")
setwd("/Users/justinnicholson/documents/academic/projects/2ypaper/data/script")
setwd("/Users/justinnicholson/documents/academic/projects/2ypaper/script")
source("consistency.R")
source("consistency.R")
consistency
consistency()
consistency(backup.frame = data.old, suspect.frame = data)
consistency(backup.frame = data.old, suspect.frame = data)
source("consistency.R")
consistency(backup.frame = data.old, suspect.frame = data)
source("consistency.R")
consistency(backup.frame = data.old, suspect.frame = data)
source("consistency.R")
consistency(backup.frame = data.old, suspect.frame = data)
?return
source("consistency.R")
source("consistency.R")
consistency(backup.frame = data.old, suspect.frame = data)
source("consistency.R")
consistency(backup.frame = data.old, suspect.frame = data)
rm(list = ls())
read.dta
getwd()
wd()
cd()
getwd
getwd()
setwd("/Users/justinnicholson/documnets/academic/projects/aidproject/analysis/data")
setwd("/Users/justinnicholson/documnets/academic/projects/aidproject/analysis")
setwd("/Users/justinnicholson/documnets/academic/projects/aidproject/")
setwd("/Users/justinnicholson/documnets/academic/projects/")
setwd("/Users/justinnicholson/documnets/academic/projects")
setwd("/Users/justinnicholson/documnets/academic")
setwd("/Users/justinnicholson/Documnets/academic")
setwd("/Users/justinnicholson")
setwd("/Users/justinnicholson/Documents/academic/aidpaper")
setwd("/Users/justinnicholson/Documents/academic")
setwd("/Users/justinnicholson/Documents/academic/projects")
setwd("/Users/justinnicholson/Documents/academic/projects/aidpaper/analysis/data")
setwd("/Users/justinnicholson/Documents/academic/projects/aidpaper/analysis\\/data")
setwd("/Users/justinnicholson/Documents/academic/projects/aidpaper/analysis")
setwd("/Users/justinnicholson/Documents/academic/projects/aidproject/analysis")
setwd("/Users/justinnicholson/Documents/academic/projects/aidproject/analysis/data")
list.files()
read.dta(AidPennSscoreMC.dta)
data = read.dta("AidPennSscoreMC.dta")
View(data)
write.dta(data,"data.csv")
write.csv(data,"data.csv")
rm(list =ls())
#Libraries
library(foreign)
library(countrycode)
library(epicalc)
#Cleanup and preliminaries
detachAllData()                                #detach all previous data - requires epicalc library
setwd("/Users/justinnicholson/documents/academic/projects/2ypaper/data/images")    #set working directory
load("adjudication.rda")
arch
head(arch)
arch[42,]
arch[41,]
arch[30,]
arch[25,]
arch[27,]
arch[26,]
arch[arch$leader == "Obama"]
arch[arch$leader == "Obama". ]
arch[arch$leader == "Obama", ]
arch[arch$leader == "Obama", ]
arch[arch$leader == "Obama",]
write.csv(arch, "arch.csv")
ls(data)
data$t.tenure = NULL
save.image(file = "adjudication.rda")
